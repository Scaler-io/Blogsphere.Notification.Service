parameters:
  projects: ""
  buildConfiguration: "Release"

steps:
  # Security analysis
  - task: PowerShell@2
    displayName: "Security Analysis - Check Vulnerable Packages"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "üîç Checking for vulnerable packages..."

        # Check current directory structure
        Write-Host "üìÅ Current directory: $(Get-Location)"
        Write-Host "üìÅ Available directories:"
        Get-ChildItem -Directory | ForEach-Object { Write-Host "  - $($_.Name)" }

        # Look for the project file in various possible locations
        $possiblePaths = @(
          "src/Blogsphere.Notification.Service",
          "Blogsphere.Notification.Service",
          ".",
          "build-output"
        )

        $projectFound = $false
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Write-Host "üìÅ Checking path: $path"
            $csprojFiles = Get-ChildItem -Path $path -Filter "*.csproj" -Recurse
            if ($csprojFiles) {
              Write-Host "‚úÖ Found project file in: $path"
              Set-Location $path
              Write-Host "üìÅ Working directory: $(Get-Location)"
              
              # Restore packages first
              Write-Host "üì¶ Restoring NuGet packages..."
              dotnet restore
              
              # Check for vulnerable packages
              $vulnerablePackages = dotnet list package --vulnerable 2>&1
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ No vulnerable packages found"
              } else {
                Write-Host "‚ö†Ô∏è Vulnerable packages detected:"
                Write-Host $vulnerablePackages
              }
              
              $projectFound = $true
              break
            }
          }
        }

        if (-not $projectFound) {
          Write-Host "‚ùå No project file found in any expected location"
          Write-Host "üìÅ All files in current directory:"
          Get-ChildItem -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" }
        }

  # Code quality analysis
  - task: PowerShell@2
    displayName: "Code Quality Analysis"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "üîç Running code quality checks..."

        # Look for the project file in various possible locations
        $possiblePaths = @(
          "src/Blogsphere.Notification.Service",
          "Blogsphere.Notification.Service",
          ".",
          "build-output"
        )

        $projectFound = $false
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Write-Host "üìÅ Checking path: $path"
            $csprojFiles = Get-ChildItem -Path $path -Filter "*.csproj" -Recurse
            if ($csprojFiles) {
              Write-Host "‚úÖ Found project file in: $path"
              Set-Location $path
              Write-Host "üìÅ Working directory: $(Get-Location)"
              
              # Restore packages first
              Write-Host "üì¶ Restoring NuGet packages..."
              dotnet restore
              
              # Check for compiler warnings and errors
              $buildOutput = dotnet build --configuration ${{ parameters.buildConfiguration }} --verbosity normal 2>&1
              $warnings = $buildOutput | Select-String "warning"
              $errors = $buildOutput | Select-String "error"
              
              # Check if build was successful (look for "0 Error(s)" at the end)
              $buildSuccess = $buildOutput | Select-String "0 Error\(s\)"
              
              if ($buildSuccess) {
                Write-Host "‚úÖ Build completed successfully"
                
                if ($warnings) {
                  Write-Host "‚ö†Ô∏è Found $($warnings.Count) warnings:"
                  $warnings | ForEach-Object { Write-Host "  $_" }
                } else {
                  Write-Host "‚úÖ No warnings found"
                }
              } else {
                Write-Host "‚ùå Build failed"
                if ($errors) {
                  Write-Host "‚ùå Found $($errors.Count) errors:"
                  $errors | ForEach-Object { Write-Host "  $_" }
                }
                exit 1
              }
              
              # Check for code style issues (if StyleCop is configured)
              Write-Host "üìã Checking code style..."
              # dotnet tool install --global StyleCop.Analyzers
              # dotnet stylecop
              
              $projectFound = $true
              break
            }
          }
        }

        if (-not $projectFound) {
          Write-Host "‚ùå No project file found for code quality analysis"
        }

  # Dependency analysis
  - task: PowerShell@2
    displayName: "Dependency Analysis"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "üì¶ Analyzing dependencies..."

        # Look for the project file in various possible locations
        $possiblePaths = @(
          "src/Blogsphere.Notification.Service",
          "Blogsphere.Notification.Service",
          ".",
          "build-output"
        )

        $projectFound = $false
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Write-Host "üìÅ Checking path: $path"
            $csprojFiles = Get-ChildItem -Path $path -Filter "*.csproj" -Recurse
            if ($csprojFiles) {
              Write-Host "‚úÖ Found project file in: $path"
              Set-Location $path
              Write-Host "üìÅ Working directory: $(Get-Location)"
              
              # Restore packages first
              Write-Host "üì¶ Restoring NuGet packages..."
              dotnet restore
              
              # List all packages
              Write-Host "Installed packages:"
              dotnet list package
              
              # Check for outdated packages
              Write-Host "`nChecking for outdated packages..."
              dotnet list package --outdated
              
              $projectFound = $true
              break
            }
          }
        }

        if (-not $projectFound) {
          Write-Host "‚ùå No project file found for dependency analysis"
        }

  # Code metrics (if available)
  - task: PowerShell@2
    displayName: "Code Metrics Analysis"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "üìä Analyzing code metrics..."

        # Count lines of code (basic metric)
        $csFiles = Get-ChildItem -Path "src" -Filter "*.cs" -Recurse
        $totalLines = 0

        foreach ($file in $csFiles) {
          $lines = Get-Content $file.FullName | Measure-Object -Line
          $totalLines += $lines.Lines
        }

        Write-Host "üìà Total lines of C# code: $totalLines"
        Write-Host "üìÅ Total C# files: $($csFiles.Count)"

  # Upload analysis results
  - task: PowerShell@2
    displayName: "Generate Analysis Report"
    inputs:
      targetType: "inline"
      script: |
        Write-Host "üìä Generating analysis report..."
        
        # Create CSV report
        $reportPath = "$(Build.ArtifactStagingDirectory)/code-analysis-report.csv"
        $reportData = @()
        
        # Add dependency analysis data
        $reportData += [PSCustomObject]@{
          Category = "Dependencies"
          Metric = "Total Packages"
          Value = "See console output for details"
          Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        }
        
        # Add code metrics data
        $csFiles = Get-ChildItem -Path "src" -Filter "*.cs" -Recurse -ErrorAction SilentlyContinue
        $totalLines = 0
        if ($csFiles) {
          foreach ($file in $csFiles) {
            $lines = Get-Content $file.FullName | Measure-Object -Line
            $totalLines += $lines.Lines
          }
        }
        
        $reportData += [PSCustomObject]@{
          Category = "Code Metrics"
          Metric = "Total Lines of Code"
          Value = $totalLines
          Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        }
        
        $reportData += [PSCustomObject]@{
          Category = "Code Metrics"
          Metric = "Total C# Files"
          Value = $csFiles.Count
          Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        }
        
        # Export to CSV
        $reportData | Export-Csv -Path $reportPath -NoTypeInformation
        Write-Host "‚úÖ Analysis report generated: $reportPath"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Analysis Report"
    inputs:
      pathToPublish: "$(Build.ArtifactStagingDirectory)/code-analysis-report.csv"
      artifactName: "CodeAnalysisReport"
    condition: succeededOrFailed()
